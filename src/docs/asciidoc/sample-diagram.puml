@startuml(id=context)
scale max 2000x2000
title Spring PetClinic - System Context
caption The System Context diagram for the Spring PetClinic system.

skinparam {
  shadowing false
  arrowColor #707070
  actorBorderColor #707070
  componentBorderColor #707070
  rectangleBorderColor #707070
  noteBackgroundColor #ffffff
  noteBorderColor #707070
  rectangleFontColor #ffffff
  rectangleStereotypeFontColor #ffffff
}
actor "Clinic Employee" <<Person>> as 2 #519823
note right of 2
  An employee of the clinic
end note
rectangle 1 <<Software System>> #6cb33e [
  Spring PetClinic
  --
  Allows employees to view and
  manage information regarding
  the veterinarians, the
  clients, and their pets.
]
2 .[#707070].> 1 : Uses
@enduml
@startuml(id=containers)
scale max 2000x2000
title Spring PetClinic - Containers
caption The Containers diagram for the Spring PetClinic system.

skinparam {
  shadowing false
  arrowColor #707070
  actorBorderColor #707070
  componentBorderColor #707070
  rectangleBorderColor #707070
  noteBackgroundColor #ffffff
  noteBorderColor #707070
  rectangleFontColor #ffffff
  rectangleStereotypeFontColor #ffffff
}
actor "Clinic Employee" <<Person>> as 2 #519823
note right of 2
  An employee of the clinic
end note
package "Spring PetClinic" <<Software System>> {
  database 5 <<Container>> #91d366 [
    Relational Database
    --
    Stores information regarding
    the veterinarians, the
    clients, and their pets.
  ]
  rectangle 4 <<Container>> #91d366 [
    Web Application
    --
    Allows employees to view and
    manage information regarding
    the veterinarians, the
    clients, and their pets.
  ]
}
2 .[#707070].> 4 : <<HTTP>>\nUses
4 .[#707070].> 5 : <<JDBC, port 9001>>\nReads from and writes to
@enduml
@startuml(id=components)
scale max 2000x2000
title Spring PetClinic - Web Application - Components
caption The Components diagram for the Spring PetClinic web application.

skinparam {
  shadowing false
  arrowColor #707070
  actorBorderColor #707070
  componentBorderColor #707070
  rectangleBorderColor #707070
  noteBackgroundColor #ffffff
  noteBorderColor #707070
  rectangleFontColor #ffffff
  rectangleStereotypeFontColor #ffffff
}
actor "Clinic Employee" <<Person>> as 2 #519823
note right of 2
  An employee of the clinic
end note
database 5 <<Container>> #91d366 [
  Relational Database
  --
  Stores information regarding
  the veterinarians, the
  clients, and their pets.
]
package "Web Application" <<Container>> {
  component 12 <<Spring MVC Controller>> #d4f3c0 [
    CrashController
    --
    Controller used to showcase
    what happens when an
    exception is thrown
  ]
  component "OwnerController" <<Spring MVC Controller>> as 13 #d4f3c0
  component 17 <<Spring Repository>> #95d46c [
    OwnerRepository
    --
    Repository class for Owner
    domain objects All method
    names are compliant with
    Spring Data naming
    conventions so this interface
    can easily be exten...
  ]
  component "PetController" <<Spring MVC Controller>> as 11 #d4f3c0
  component 14 <<Spring Repository>> #95d46c [
    PetRepository
    --
    Repository class for Pet
    domain objects All method
    names are compliant with
    Spring Data naming
    conventions so this interface
    can easily be extende...
  ]
  component "VetController" <<Spring MVC Controller>> as 10 #d4f3c0
  component 16 <<Spring Repository>> #95d46c [
    VetRepository
    --
    Repository class for Vet
    domain objects All method
    names are compliant with
    Spring Data naming
    conventions so this interface
    can easily be extende...
  ]
  component "VisitController" <<Spring MVC Controller>> as 9 #d4f3c0
  component 15 <<Spring Repository>> #95d46c [
    VisitRepository
    --
    Repository class for Visit
    domain objects All method
    names are compliant with
    Spring Data naming
    conventions so this interface
    can easily be exten...
  ]
  component "WelcomeController" <<Spring MVC Controller>> as 8 #d4f3c0
}
2 .[#707070].> 12 : <<HTTP>>\nUses
2 .[#707070].> 13 : <<HTTP>>\nUses
2 .[#707070].> 11 : <<HTTP>>\nUses
2 .[#707070].> 10 : <<HTTP>>\nUses
2 .[#707070].> 9 : <<HTTP>>\nUses
2 .[#707070].> 8 : <<HTTP>>\nUses
13 .[#707070].> 17
17 .[#707070].> 5 : <<JDBC>>\nReads from and writes to
11 .[#707070].> 17
11 .[#707070].> 14
14 .[#707070].> 5 : <<JDBC>>\nReads from and writes to
10 .[#707070].> 16
16 .[#707070].> 5 : <<JDBC>>\nReads from and writes to
9 .[#707070].> 14
9 .[#707070].> 15
15 .[#707070].> 5 : <<JDBC>>\nReads from and writes to
@enduml
@startuml(id=viewListOfVets)
scale max 2000x2000
title Web Application - Dynamic
caption Shows how the "view list of vets" feature works.

skinparam {
  shadowing false
  arrowColor #707070
  actorBorderColor #707070
  componentBorderColor #707070
  rectangleBorderColor #707070
  noteBackgroundColor #ffffff
  noteBorderColor #707070
  rectangleFontColor #ffffff
  rectangleStereotypeFontColor #ffffff
}
actor "Clinic Employee" <<Person>> as 2 #519823
note right of 2
  An employee of the clinic
end note
database 5 <<Container>> #91d366 [
  Relational Database
  --
  Stores information regarding
  the veterinarians, the
  clients, and their pets.
]
component "VetController" <<Spring MVC Controller>> as 10 #d4f3c0
component 16 <<Spring Repository>> #95d46c [
  VetRepository
  --
  Repository class for Vet
  domain objects All method
  names are compliant with
  Spring Data naming
  conventions so this interface
  can easily be extende...
]
2 -[#707070]> 10 : 1. Requests list of vets from /vets
10 -[#707070]> 16 : 2. Calls findAll
16 -[#707070]> 5 : 3. select * from vets
@enduml